import serial
import threading
import time

# –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ—Ä—Ç—ã
port_list = ['COM9', 'COM11']

def open_safe_port(port, baud=9600):
    try:
        ser = serial.Serial(port, baud, timeout=1)
        print(f"‚úÖ –û—Ç–∫—Ä—ã—Ç –ø–æ—Ä—Ç: {port}")
        return ser
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç {port}: {e}")
        return None

all_serials = []
for p in port_list:
    ser = open_safe_port(p)
    if ser is not None:
        all_serials.append((ser, p))

if len(all_serials) != 2:
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ–±–∞ –Ω—É–∂–Ω—ã—Ö –ø–æ—Ä—Ç–∞! –ü—Ä–æ–≤–µ—Ä—å COM9 –∏ COM11.")
    exit(1)

ser1, name1 = all_serials[0]  # –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–∞—Ç—á–∏–∫
ser2, name2 = all_serials[1]  # –í—Ç–æ—Ä–æ–π Arduino
time.sleep(2)  # –∂–¥—ë–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Arduino

def listen_port1_forward_to_2():
    while True:
        try:
            line = ser1.readline().decode(errors='ignore').strip()
            if line:
                print(f"üì© [{name1}] –ü—Ä–∏–Ω—è—Ç–æ: {line}")
                # –õ—é–±–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–∏—à–µ–¥—à–∞—è –æ—Ç –¥–∞—Ç—á–∏–∫–∞, —Å—Ä–∞–∑—É —É—Ö–æ–¥–∏—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–π Arduino:
                ser2.write((line + '\n').encode())
                print(f"‚è© [{name1}] –ü–µ—Ä–µ—Å–ª–∞–ª –∫–æ–º–∞–Ω–¥—É '{line}' –Ω–∞ [{name2}]")
        except Exception as e:
            print(f"[{name1}] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")

def listen_port2_print():
    while True:
        try:
            line = ser2.readline().decode(errors='ignore').strip()
            if line:
                print(f"üì© [{name2}] –ü—Ä–∏–Ω—è—Ç–æ: {line}")
        except Exception as e:
            print(f"[{name2}] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –æ–±–æ–∏—Ö –ø–æ—Ä—Ç–æ–≤
t1 = threading.Thread(target=listen_port1_forward_to_2, daemon=True)
t2 = threading.Thread(target=listen_port2_print, daemon=True)
t1.start()
t2.start()

print("\nüü¢ –ì–æ—Ç–æ–≤–æ! –§–æ—Ä–º–∞—Ç: 1 –∫–æ–º–∞–Ω–¥–∞, 2 –∫–æ–º–∞–Ω–¥–∞, all –∫–æ–º–∞–Ω–¥–∞, exit")
print(f"1: {name1}    2: {name2}")

try:
    while True:
        cmd = input("üëâ [–ø–æ—Ä—Ç] [–∫–æ–º–∞–Ω–¥–∞] –∏–ª–∏ 'exit': ").strip()
        if cmd == "exit":
            print("üö™ –í—ã—Ö–æ–¥...")
            break

        parts = cmd.split(maxsplit=1)
        if len(parts) == 2:
            target, command = parts
            if target == "all":
                ser1.write((command + '\n').encode())
                ser2.write((command + '\n').encode())
                print(f"üîÅ [all] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {command}")
            elif target == "1":
                ser1.write((command + '\n').encode())
                print(f"üîÅ [{name1}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {command}")
            elif target == "2":
                ser2.write((command + '\n').encode())
                print(f"üîÅ [{name2}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {command}")
            else:
                print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Ä—Ç! –ò—Å–ø–æ–ª—å–∑—É–π 'all', '1' –∏–ª–∏ '2'.")
        else:
            print("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: [–ø–æ—Ä—Ç] [–∫–æ–º–∞–Ω–¥–∞]. –ü—Ä–∏–º–µ—Ä: all PUSH, 1 f, 2 OPEN, exit")

finally:
    ser1.close()
    ser2.close()
    print("–ü–æ—Ä—Ç—ã –∑–∞–∫—Ä—ã—Ç—ã.")
