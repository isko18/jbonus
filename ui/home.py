from PyQt5.QtWidgets import (
    QWidget, QLabel, QPushButton, QVBoxLayout, QLineEdit, QMessageBox, QHBoxLayout, QSpacerItem, QSizePolicy
)
from PyQt5.QtGui import QPixmap, QFont, QIcon, QMovie
from PyQt5.QtCore import Qt, QTimer, pyqtSignal, QSize, QPropertyAnimation, QEasingCurve
import os
import requests
from utils.qr_generator import generate_qr
from utils.image_loader import load_image_from_file
from ws.manager import WebSocketManager
from PyQt5.QtSvg import QSvgWidget


FANDOMAT_TOKEN = "fan_bc539aed70f65db5544c5f38ec1a076250150a7802f341d9fa94729a32bc9c5c"
API_BASE_URL = "https://back.jashyl-bonus.kg/api/v1"

class HomeScreen(QWidget):
    material_sent = pyqtSignal(str)
    cap_accepted_signal = pyqtSignal()

    def __init__(self):
        super().__init__()
        self.setWindowTitle("–§–∞–Ω–¥–æ–º–∞—Ç")
        self.setFixedSize(420, 700)
        self.setWindowIcon(QIcon("assets/icons/recycle.png"))

        self.cap_required = False
        self.cap_received = False
        self.ws_worker = None
        self.banner_urls = []
        self.current_banner_index = 0
        self.loaded_pixmap = None
        self.socket_ready = False
        self.loading_overlay = None
        self.qr_shown = False
        self.session_active = False




        self.setup_ui()
        QTimer.singleShot(100, self.load_banners)
        self.show()

    def setup_ui(self):
        self.setStyleSheet("""
            QWidget {
                background-color: rgba(255, 255, 255, 0.92); /* –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Å–≤–µ—Ç–ª—ã–π —Ñ–æ–Ω */
                color: #212121;
                font-family: 'Segoe UI', 'Roboto', sans-serif;
            }

            QLabel {
                font-size: 17px;
                color: #333333;
            }

            QPushButton {
                background-color: #4CAF50;
                color: white;
                font-size: 18px;
                padding: 12px 20px;
                border: none;
                border-radius: 12px;
            }

            QPushButton:hover {
                background-color: #66BB6A;
            }

            QPushButton:pressed {
                background-color: #388E3C;
            }

            QLineEdit {
                background: #F5F5F5;
                color: #212121;
                border: 2px solid #AED581;
                border-radius: 10px;
                padding: 10px;
                font-size: 16px;
            }

            QLineEdit:focus {
                border: 2px solid #7CB342;
                background: #FFFFFF;
            }
        """)


        self.layout = QVBoxLayout(self)
        self.layout.setContentsMargins(20, 20, 20, 20)
        self.layout.setSpacing(20)

        self.ad_label = QLabel(alignment=Qt.AlignCenter)
        self.ad_label.setScaledContents(True)
        self.layout.addWidget(self.ad_label)

        self.status_indicator = QLabel("", alignment=Qt.AlignCenter)
        self.status_indicator.setVisible(False)
        self.status_gif = QMovie("assets/icons/loading.gif")
        self.status_indicator.setMovie(self.status_gif)
        self.layout.addWidget(self.status_indicator)

        self.title = QLabel("–ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å', —á—Ç–æ–±—ã —Å–¥–∞—Ç—å –≤—Ç–æ—Ä—Å—ã—Ä—å—ë", alignment=Qt.AlignCenter)
        self.title.setWordWrap(True)
        self.title.setFont(QFont("Segoe UI", 16, QFont.Bold))
        self.layout.addWidget(self.title)

        self.qr_label = QLabel(alignment=Qt.AlignCenter)
        self.qr_label.hide()
        self.layout.addWidget(self.qr_label)

        self.barcode_input = QLineEdit()
        self.barcode_input.setPlaceholderText("üîç –°–∫–∞–Ω–∏—Ä—É–π—Ç–µ —à—Ç—Ä–∏—Ö–∫–æ–¥")
        self.barcode_input.setClearButtonEnabled(True)
        self.barcode_input.returnPressed.connect(self.submit_material)
        self.barcode_input.hide()
        self.layout.addWidget(self.barcode_input)

        self.confirm_btn = QPushButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
        self.confirm_btn.setIcon(QIcon("assets/icons/check.png"))
        self.confirm_btn.setIconSize(QSize(24, 24))
        self.confirm_btn.clicked.connect(self.submit_material)
        self.confirm_btn.setEnabled(False)
        self.confirm_btn.hide()
        self.layout.addWidget(self.confirm_btn)

        self.info_label = QLabel(alignment=Qt.AlignCenter)
        self.info_label.hide()
        self.layout.addWidget(self.info_label)

        self.start_btn = QPushButton("üöÄ –ù–∞—á–∞—Ç—å –ø—Ä–∏—ë–º")
        self.start_btn.setIcon(QIcon("assets/icons/start.png"))
        self.start_btn.setIconSize(QSize(24, 24))
        self.start_btn.clicked.connect(self.start_session)
        self.layout.addWidget(self.start_btn)

        self.material_sent.connect(self.on_material_sent)
        self.cap_accepted_signal.connect(self.on_cap_received)
    
    def show_loading_overlay(self):
        if self.loading_overlay:
            return

        self.loading_overlay = QWidget(self)
        # self.loading_overlay.setStyleSheet("background-color: rgba(0, 0, 0, 160);")
        self.loading_overlay.setGeometry(0, 0, self.width(), self.height())
        self.loading_overlay.setAttribute(Qt.WA_TransparentForMouseEvents, False)
        self.loading_overlay.setAttribute(Qt.WA_DeleteOnClose)
        self.loading_overlay.show()

        layout = QVBoxLayout(self.loading_overlay)
        layout.setAlignment(Qt.AlignCenter)

        svg_path = r"C:\Users\Islam\Desktop\descktopJbonus\assets\banners\icons\5.svg"  # –ø—É—Ç—å –¥–æ —Ç–≤–æ–µ–≥–æ SVG
        svg_widget = QSvgWidget(svg_path)
        svg_widget.setFixedSize(120, 120)

        layout.addWidget(svg_widget)


    def check_socket_and_show_qr(self):
        self.hide_loading_overlay()
        if self.socket_ready:
            self.show_qr_code()


    def hide_loading_overlay(self):
        if self.loading_overlay:
            self.loading_overlay.deleteLater()
            self.loading_overlay = None

    def show_status(self, text):
        self.status_indicator.setToolTip(text)
        self.status_gif.start()
        self.status_indicator.setVisible(True)

    def hide_status(self):
        self.status_gif.stop()
        self.status_indicator.setVisible(False)

    def on_connection_state_changed(self, is_connected):
        if is_connected:
            self.status_indicator.setToolTip("üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É")
        else:
            self.status_indicator.setToolTip("üî¥ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")

    def reset_to_home(self):
        self.title.setText("–ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å', —á—Ç–æ–±—ã —Å–¥–∞—Ç—å –≤—Ç–æ—Ä—Å—ã—Ä—å—ë")
        self.qr_label.clear()
        self.qr_label.hide()
        self.barcode_input.hide()
        self.confirm_btn.hide()
        self.info_label.hide()
        self.barcode_input.clear()
        self.start_btn.setEnabled(True)  # ‚úÖ —Å–Ω–æ–≤–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º –Ω–∞–∂–∏–º–∞—Ç—å
        self.start_btn.show()
        self.ad_label.show()
        self.hide_status()
        self.cap_required = False
        self.cap_received = False
        self.confirm_btn.setEnabled(False)
        self.session_active = False


        WebSocketManager().stop()
        self.ws_worker = None  # üî• –û–±–Ω—É–ª—è–µ–º

        
    def _reset_after_disconnect(self):
        self.hide_loading_overlay()
        self.reset_to_home()

    def on_session_ended(self):
        self.show_loading_overlay()  # ‚è≥ –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
        self.title.setText("üîå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è...")

        QTimer.singleShot(1500, self._reset_after_disconnect)  # ‚è± –ß–µ—Ä–µ–∑ 2 —Å–µ–∫ –≤–µ—Ä–Ω—É—Ç—å –Ω–∞ –¥–æ–º–∞—à–Ω–∏–π



    def resizeEvent(self, event):
        if self.loaded_pixmap:
            self.ad_label.setPixmap(self.loaded_pixmap.scaled(
                self.ad_label.size(), Qt.KeepAspectRatioByExpanding, Qt.SmoothTransformation))

    def load_banners(self):
        path = "assets/banners"
        if os.path.exists(path):
            self.banner_urls = [os.path.join(path, f) for f in os.listdir(path)
                                if f.lower().endswith((".png", ".jpg", ".jpeg", ".webp"))]
            if self.banner_urls:
                self.show_banner(self.banner_urls[0])
                self.banner_timer = QTimer(self)
                self.banner_timer.timeout.connect(self.next_banner)
                self.banner_timer.start(5000)

    def show_banner(self, path):
        pixmap = load_image_from_file(path)
        if pixmap:
            self.loaded_pixmap = pixmap
            self.ad_label.setPixmap(pixmap.scaled(
                self.ad_label.size(), Qt.KeepAspectRatioByExpanding, Qt.SmoothTransformation))
            anim = QPropertyAnimation(self.ad_label, b"windowOpacity")
            anim.setDuration(500)
            anim.setStartValue(0.0)
            anim.setEndValue(1.0)
            anim.setEasingCurve(QEasingCurve.InOutQuad)
            anim.start()
            self.anim = anim

    def next_banner(self):
        if self.banner_urls:
            self.current_banner_index = (self.current_banner_index + 1) % len(self.banner_urls)
            self.show_banner(self.banner_urls[self.current_banner_index])
            
    def on_socket_opened(self):
        print("üß† Socket –æ—Ç–∫—Ä—ã—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º QR")
        self.socket_ready = True
        QTimer.singleShot(4700, self.check_socket_and_show_qr)


            
    def show_qr_code(self):
        if self.qr_shown:  # üß† —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω ‚Äî –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
            return
        self.qr_shown = True

        path = generate_qr(FANDOMAT_TOKEN)
        self.qr_label.setPixmap(QPixmap(path).scaled(220, 220, Qt.KeepAspectRatio))
        self.qr_label.show()
        self.title.setText("üì≤ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
        self.status_indicator.setVisible(False)
        self.hide_loading_overlay()

    def start_session(self):
        if self.session_active:
            print("‚ö†Ô∏è –°–µ—Å—Å–∏—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞. –ù–æ–≤–∞—è –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞.")
            return

        print("‚ñ∂Ô∏è –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ù–∞—á–∞—Ç—å –ø—Ä–∏—ë–º'")
        self.session_active = True
        self.socket_ready = False
        self.qr_shown = False

        self.start_btn.hide()
        self.qr_label.hide()
        self.title.setText("üü° –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞...\n‚è≥ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º...")

        self.status_indicator.setToolTip("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket...")
        self.status_gif.start()
        self.status_indicator.setVisible(True)

        # üõë –ù–∞–¥—ë–∂–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π worker (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
        if self.ws_worker:
            WebSocketManager().stop()
            self.ws_worker = None
            QTimer.singleShot(2000, self._start_ws)  # ‚è≥ –∂–¥—ë–º, —á—Ç–æ–±—ã —Å–æ–∫–µ—Ç —Ç–æ—á–Ω–æ –∑–∞–∫—Ä—ã–ª—Å—è
        else:
            self._start_ws()

    def _start_ws(self):
        self.ws_worker = WebSocketManager().start_worker()
        self.ws_worker.connected.connect(self.on_ws_connected)
        self.ws_worker.cap_accepted_signal.connect(self.cap_accepted_signal)
        self.ws_worker.session_ended.connect(self.on_session_ended)
        self.ws_worker.error.connect(lambda msg: self.show_status(f"‚ùå WebSocket –æ—à–∏–±–∫–∞: {msg}"))
        self.ws_worker.connected_state_changed.connect(self.on_connection_state_changed)
        self.ws_worker.socket_opened.connect(self.on_socket_opened)

        self.show_loading_overlay()



    def on_ws_connected(self, user):
        self.hide_status()
        self.ad_label.hide()
        full_name = user.get("get_full_name") or f"{user.get('first_name', '')} {user.get('last_name', '')}".strip()
        quantity = user.get("quantity_of_raw_materials", 0.0)
        self.title.setText(f"üëã –ü—Ä–∏–≤–µ—Ç, {full_name}!\nüßæ –¢—ã —É–∂–µ —Å–¥–∞–ª: {quantity} –≥ —Å—ã—Ä—å—è\nüì¶ –¢–µ–ø–µ—Ä—å –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π —à—Ç—Ä–∏—Ö–∫–æ–¥ –±—É—Ç—ã–ª–∫–∏")
        self.qr_label.hide()
        self.barcode_input.show()
        self.confirm_btn.show()
        self.confirm_btn.setEnabled(True)
        self.barcode_input.setFocus()

    def on_cap_received(self):
        self.cap_received = True
        QMessageBox.information(self, "–ö—Ä—ã—à–∫–∞", "–ö—Ä—ã—à–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –¢–µ–ø–µ—Ä—å —Å–¥–∞–π—Ç–µ –±—É—Ç—ã–ª–∫—É.")

    def submit_material(self):
        barcode = self.barcode_input.text().strip()
        if not barcode.isdigit():
            self.barcode_input.setStyleSheet("border: 2px solid red;")
            QTimer.singleShot(1500, lambda: self.barcode_input.setStyleSheet(""))
            QMessageBox.warning(self, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —à—Ç—Ä–∏—Ö–∫–æ–¥")
            return

        try:
            r = requests.get(f"{API_BASE_URL}/recyclable-materials/by/barcode/{barcode}/")
            if r.status_code != 200:
                raise ValueError("–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

            data = r.json()
            name, mtype, weight = data["name"], data["type"], data["weight"]
            self.info_label.setText(f"–ú–∞—Ç–µ—Ä–∏–∞–ª: {name}\n–¢–∏–ø: {mtype}\n–í–µ—Å: {weight} –≥")
            self.info_label.setStyleSheet("color: white;")
            self.info_label.show()

            if mtype == "plastic" and not self.cap_received:
                self.cap_required = True
                self.title.setText("üß¢ –°–Ω–∞—á–∞–ª–∞ —Å–¥–∞–π—Ç–µ –∫—Ä—ã—à–∫—É")
                self.barcode_input.clear()
                return

            self.ws_worker.send_material(barcode)
            self.material_sent.emit(name)

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", str(e))

    def on_material_sent(self, name):
        self.info_label.setStyleSheet("color: #00E676; font-weight: bold")
        self.info_label.setText(f"‚úÖ {name} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        self.barcode_input.clear()
        self.title.setText("üì¶ –°–∫–∞–Ω–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —à—Ç—Ä–∏—Ö–∫–æ–¥")