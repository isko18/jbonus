# arduino_manager.py

from PyQt5.QtCore import QObject, pyqtSignal
import threading
import serial
import serial.tools.list_ports
from utils.logger import get_logger

class ArduinoManager(QObject):
    cap_accepted = pyqtSignal()
    bottle_accepted = pyqtSignal()
    aluminum_accepted = pyqtSignal() 
    aluminum_verified = pyqtSignal()


    def __init__(self, ports_to_use=None):
        """
        ports_to_use: —Å–ø–∏—Å–æ–∫ COM-–ø–æ—Ä—Ç–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä ["COM4", "COM6"]
        –ï—Å–ª–∏ None - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ.
        """
        super().__init__()
        self.logger = get_logger()
        self.ports_to_use = ports_to_use
        self.arduinos = []
        self.running = False
        self.lock = threading.Lock()

        

    def start(self):
        self.running = True
        try:
            all_ports = serial.tools.list_ports.comports()
            if self.ports_to_use:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—ã
                ports = [p for p in all_ports if p.device in self.ports_to_use]
            else:
                # –ò–Ω–∞—á–µ - –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ
                ports = all_ports

            if not ports:
                self.logger.warning("‚ùó –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Arduino.")
                return

            for port in ports:
                try:
                    arduino = serial.Serial(port.device, baudrate=9600, timeout=1)
                    self.arduinos.append(arduino)
                    self.logger.info(f"‚úÖ Arduino –ø–æ–¥–∫–ª—é—á–µ–Ω: {port.device}")
                    threading.Thread(target=self.listen_to_arduino, args=(arduino,), daemon=True).start()
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å {port.device}: {e}")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä—Ç–æ–≤: {e}")


    def listen_to_arduino(self, arduino):
        while self.running:
            try:
                if arduino.in_waiting:
                    with self.lock:
                        line = arduino.readline().decode(errors="ignore").strip()
                    if line:
                        self.handle_message(line)
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å {arduino.port}: {e}")
                try:
                    self.arduinos.remove(arduino)
                    self.logger.warning(f"‚ö†Ô∏è Arduino {arduino.port} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏.")
                except ValueError:
                    pass
                break


    def handle_message(self, message):
        self.logger.info(f"üì• –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Arduino: {message}")

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        # message = message.strip().lower()

        if message == "cap_accepted":
            self.logger.info("üß¢ –ö—Ä—ã—à–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!")
            self.cap_accepted.emit()
        elif message == "bottle_accepted":
            self.logger.info("üçæ –ë—É—Ç—ã–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!")
            self.bottle_accepted.emit()
        elif message == "BOT_OK3":
            self.logger.info("‚úÖ BOT_OK3 –ø–æ–ª—É—á–µ–Ω - –∞–ª—é–º–∏–Ω–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!")
            self.aluminum_verified.emit()
            self.aluminum_accepted.emit()  # <== –ù–û–í–´–ô –°–ò–ì–ù–ê–õ
        elif any(kw in message for kw in ["–∂–¥—É –∫–æ–º–∞–Ω–¥—É", "—Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞", "close –∑–∞–≤–µ—Ä—à—ë–Ω"]):
            self.logger.info(f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å: {message}")
        else:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")


    def send_to_all(self, text):
        for arduino in list(self.arduinos):
            try:
                if arduino.is_open:
                    with self.lock:
                        arduino.write((text + "\n").encode())
                    self.logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text}")
                else:
                    self.logger.warning(f"‚ö†Ô∏è –ü–æ—Ä—Ç {arduino.port} –∑–∞–∫—Ä—ã—Ç. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ {arduino.port}: {e}")

    # def stop(self):
    #     self.running = False
    #     for arduino in list(self.arduinos):
    #         try:
    #             if arduino.is_open:
    #                 arduino.close()
    #                 self.logger.info(f"üîí –ü–æ—Ä—Ç {arduino.port} –∑–∞–∫—Ä—ã—Ç")
    #         except Exception as e:
    #             self.logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ—Ä—Ç–∞ {arduino.port}: {e}")
    #     self.arduinos.clear()
